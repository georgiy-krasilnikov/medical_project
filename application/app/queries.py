# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.23.0
# source: query.sql
from typing import AsyncIterator, Iterator

import sqlalchemy
import sqlalchemy.ext.asyncio

from models import User


GET_TEST_IMAGES_FROM_LIMB = """-- name: get_test_images_from_limb \\:many
SELECT img FROM limb_test
WHERE info = :p1
"""


GET_TEST_IMAGES_FROM_PERELIMB = """-- name: get_test_images_from_perelimb \\:many
SELECT img FROM perelimb_test
WHERE info = :p1
"""


GET_TRAIN_IMAGES_FROM_LIMB = """-- name: get_train_images_from_limb \\:many
SELECT img FROM limb_train
WHERE info = :p1
"""


GET_TRAIN_IMAGES_FROM_PERELIMB = """-- name: get_train_images_from_perelimb \\:many
SELECT img FROM perelimb_train
WHERE info = :p1
"""


GET_USERS = """-- name: get_users \\:many
SELECT id, login, password FROM users
"""


INPUT_TEST_IMAGES_TO_LIMB = """-- name: input_test_images_to_limb \\:exec
INSERT INTO limb_test (
    img, info
) VALUES (
  :p1, :p2
)
"""


INPUT_TEST_IMAGES_TO_PERELIMB = """-- name: input_test_images_to_perelimb \\:exec
INSERT INTO perelimb_test (
    img, info
) VALUES (
  :p1, :p2
)
"""


INPUT_TRAIN_IMAGES_TO_LIMB = """-- name: input_train_images_to_limb \\:exec
INSERT INTO limb_train (
    img, info
) VALUES (
  :p1, :p2
)
"""


INPUT_TRAIN_IMAGES_TO_PERELIMB = """-- name: input_train_images_to_perelimb \\:exec
INSERT INTO perelimb_train (
    img, info
) VALUES (
  :p1, :p2
)
"""


class Queries:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_test_images_from_limb(self, *, info: str) -> Iterator[memoryview]:
        result = self._conn.execute(sqlalchemy.text(GET_TEST_IMAGES_FROM_LIMB), {"p1": info})
        for row in result:
            yield row[0]

    def get_test_images_from_perelimb(self, *, info: str) -> Iterator[memoryview]:
        result = self._conn.execute(sqlalchemy.text(GET_TEST_IMAGES_FROM_PERELIMB), {"p1": info})
        for row in result:
            yield row[0]

    def get_train_images_from_limb(self, *, info: str) -> Iterator[memoryview]:
        result = self._conn.execute(sqlalchemy.text(GET_TRAIN_IMAGES_FROM_LIMB), {"p1": info})
        for row in result:
            yield row[0]

    def get_train_images_from_perelimb(self, *, info: str) -> Iterator[memoryview]:
        result = self._conn.execute(sqlalchemy.text(GET_TRAIN_IMAGES_FROM_PERELIMB), {"p1": info})
        for row in result:
            yield row[0]

    def get_users(self) -> Iterator[User]:
        result = self._conn.execute(sqlalchemy.text(GET_USERS))
        for row in result:
            yield User(
                id=row[0],
                login=row[1],
                password=row[2],
            )

    def input_test_images_to_limb(self, *, img: memoryview, info: str) -> None:
        self._conn.execute(sqlalchemy.text(INPUT_TEST_IMAGES_TO_LIMB), {"p1": img, "p2": info})

    def input_test_images_to_perelimb(self, *, img: memoryview, info: str) -> None:
        self._conn.execute(sqlalchemy.text(INPUT_TEST_IMAGES_TO_PERELIMB), {"p1": img, "p2": info})

    def input_train_images_to_limb(self, *, img: memoryview, info: str) -> None:
        self._conn.execute(sqlalchemy.text(INPUT_TRAIN_IMAGES_TO_LIMB), {"p1": img, "p2": info})

    def input_train_images_to_perelimb(self, *, img: memoryview, info: str) -> None:
        self._conn.execute(sqlalchemy.text(INPUT_TRAIN_IMAGES_TO_PERELIMB), {"p1": img, "p2": info})


class AsyncQueries:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_test_images_from_limb(self, *, info: str) -> AsyncIterator[memoryview]:
        result = await self._conn.stream(sqlalchemy.text(GET_TEST_IMAGES_FROM_LIMB), {"p1": info})
        async for row in result:
            yield row[0]

    async def get_test_images_from_perelimb(self, *, info: str) -> AsyncIterator[memoryview]:
        result = await self._conn.stream(sqlalchemy.text(GET_TEST_IMAGES_FROM_PERELIMB), {"p1": info})
        async for row in result:
            yield row[0]

    async def get_train_images_from_limb(self, *, info: str) -> AsyncIterator[memoryview]:
        result = await self._conn.stream(sqlalchemy.text(GET_TRAIN_IMAGES_FROM_LIMB), {"p1": info})
        async for row in result:
            yield row[0]

    async def get_train_images_from_perelimb(self, *, info: str) -> AsyncIterator[memoryview]:
        result = await self._conn.stream(sqlalchemy.text(GET_TRAIN_IMAGES_FROM_PERELIMB), {"p1": info})
        async for row in result:
            yield row[0]

    async def get_users(self) -> AsyncIterator[User]:
        result = await self._conn.stream(sqlalchemy.text(GET_USERS))
        async for row in result:
            yield User(
                id=row[0],
                login=row[1],
                password=row[2],
            )

    async def input_test_images_to_limb(self, *, img: memoryview, info: str) -> None:
        await self._conn.execute(sqlalchemy.text(INPUT_TEST_IMAGES_TO_LIMB), {"p1": img, "p2": info})

    async def input_test_images_to_perelimb(self, *, img: memoryview, info: str) -> None:
        await self._conn.execute(sqlalchemy.text(INPUT_TEST_IMAGES_TO_PERELIMB), {"p1": img, "p2": info})

    async def input_train_images_to_limb(self, *, img: memoryview, info: str) -> None:
        await self._conn.execute(sqlalchemy.text(INPUT_TRAIN_IMAGES_TO_LIMB), {"p1": img, "p2": info})

    async def input_train_images_to_perelimb(self, *, img: memoryview, info: str) -> None:
        await self._conn.execute(sqlalchemy.text(INPUT_TRAIN_IMAGES_TO_PERELIMB), {"p1": img, "p2": info})
